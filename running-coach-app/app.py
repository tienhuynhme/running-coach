
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import date

@st.cache_data
def load_data():
    try:
        df = pd.read_csv("data.csv")
        df["Ng√†y"] = pd.to_datetime(df["Ng√†y"])
    except:
        df = pd.DataFrame(columns=["Ng√†y", "Bu·ªïi", "Pace", "HR", "SpO2 tr∆∞·ªõc", "SpO2 sau", "RPE", "T·ªïng ƒëi·ªÉm", "ƒê√°nh gi√°"])
    return df

def calculate_score(row):
    score = 0
    if 130 <= row["HR"] <= 168: score += 40
    if row["SpO2 sau"] >= 94 and row["SpO2 tr∆∞·ªõc"] - row["SpO2 sau"] <= 2: score += 30
    if row["RPE"] <= 6: score += 20
    if 5.85 <= row["Pace"] <= 7.15: score += 10
    return score

def rate(score):
    if score >= 80: return "T·ªët"
    elif score >= 60: return "Trung b√¨nh"
    else: return "C·∫ßn ƒëi·ªÅu ch·ªânh"

df = load_data()

st.title("üèÉ‚Äç‚ôÇÔ∏è Running Coach Tien")
tab1, tab2, tab3 = st.tabs(["üìÖ H√¥m nay t·∫≠p g√¨", "üìù Nh·∫≠t k√Ω ch·∫°y", "üìä Bi·ªÉu ƒë·ªì"])

with tab1:
    today = pd.to_datetime(date.today())
    try:
        schedule = pd.read_csv("schedule.csv")
        schedule["Ng√†y"] = pd.to_datetime(schedule["Ng√†y"])
        today_plan = schedule[schedule["Ng√†y"] == today]
        if not today_plan.empty:
            st.subheader("L·ªãch t·∫≠p h√¥m nay:")
            st.write(today_plan.iloc[0][["Bu·ªïi", "N·ªôi dung", "Target HR Zone"]])
        else:
            st.info("H√¥m nay kh√¥ng c√≥ bu·ªïi ch·∫°y.")
    except:
        st.warning("Kh√¥ng t√¨m th·∫•y file l·ªãch t·∫≠p.")

with tab2:
    st.subheader("Nh·∫≠p k·∫øt qu·∫£ bu·ªïi ch·∫°y")
    with st.form("log_run"):
        col1, col2 = st.columns(2)
        with col1:
            day = st.date_input("Ng√†y", value=date.today())
            session = st.selectbox("Bu·ªïi", ["Tempo", "Interval", "Long run"])
            pace = st.number_input("Pace (min/km)", step=0.1)
            hr = st.number_input("HR trung b√¨nh", step=1)
        with col2:
            spo2_before = st.number_input("SpO2 tr∆∞·ªõc ch·∫°y", step=1)
            spo2_after = st.number_input("SpO2 sau ch·∫°y", step=1)
            rpe = st.slider("RPE (1‚Äì10)", 1, 10, 5)

        submitted = st.form_submit_button("L∆∞u k·∫øt qu·∫£")
        if submitted:
            new_row = {
                "Ng√†y": pd.to_datetime(day),
                "Bu·ªïi": session,
                "Pace": pace,
                "HR": hr,
                "SpO2 tr∆∞·ªõc": spo2_before,
                "SpO2 sau": spo2_after,
                "RPE": rpe
            }
            new_row["T·ªïng ƒëi·ªÉm"] = calculate_score(new_row)
            new_row["ƒê√°nh gi√°"] = rate(new_row["T·ªïng ƒëi·ªÉm"])
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_csv("data.csv", index=False)
            st.success("ƒê√£ l∆∞u k·∫øt qu·∫£!")

    st.dataframe(df.sort_values("Ng√†y", ascending=False))

with tab3:
    if not df.empty:
        df["Tu·∫ßn"] = df["Ng√†y"].dt.isocalendar().week
        weekly = df.groupby("Tu·∫ßn")["T·ªïng ƒëi·ªÉm"].mean().reset_index()
        fig, ax = plt.subplots()
        ax.bar(weekly["Tu·∫ßn"], weekly["T·ªïng ƒëi·ªÉm"], color='skyblue')
        ax.axhline(80, color='green', linestyle='--', label="T·ªët")
        ax.axhline(60, color='orange', linestyle='--', label="Trung b√¨nh")
        ax.set_ylabel("T·ªïng ƒëi·ªÉm")
        ax.set_title("Hi·ªáu qu·∫£ luy·ªán t·∫≠p theo tu·∫ßn")
        ax.legend()
        st.pyplot(fig)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")
